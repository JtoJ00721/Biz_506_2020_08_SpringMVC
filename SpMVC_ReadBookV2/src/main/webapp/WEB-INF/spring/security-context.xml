<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- authProvider에서 UserDetailService를 사용하야 하기 때문에 -->
	<!-- 여기에 UserDetailService클래스가 있는 패키지를 스캔하도록 설정을 해주어야 한다. -->
	<context:component-scan
		base-package="com.biz.book.service.auth" />

	<!-- 권한검사를 할때 prefix 설정하는 클래스 bean -->
	<!-- 이 클래스르르 bean 설정하면 constructor-arg value="" : prifix 제거하는 효과 -->
	<!-- sequrity 버전마다 조금씩 차이가 있어서 설정값이 적용이 안되는 경우가 많다 -->
	<!-- 보통은 설정하지 않고 기본값으로 접두어를 붙여서 사용한다. : ROLE_ADMIN -->
	<!-- <bean class="org.springframework.security.config.core.GrantedAuthorityDefaults"> 
		<constructor-arg value="ROLE_"></constructor-arg> </bean> -->

	<!-- spring security에서 사용할 AuthenticationProvider를 구현한 -->
	<!-- 클래스를 bean 등록 -->
	<bean id="customAuthProvider"
		class="com.biz.book.auth.AuthProviderImpl" />

	<!-- 커스터마이징 된 AuthProvider를 spring security에서 사용하도록 -->
	<!-- security:authentication-manager에 등록 -->
	<security:authentication-manager>
		<security:authentication-provider
			ref="customAuthProvider" />
	</security:authentication-manager>

	<!-- spring security의 핵심 설정 부분 -->
	<!-- security:http -->
	<!-- login form설정 -->
	<!-- login 방법 설정 -->
	<!-- login 되었을때 인가, 권한에 관한 설정 -->
	<!-- login 이 되었을때 URL 패턴에 따라 접근 권한을 세밀하게 부여할 수 있다. -->
	<!-- security:intercepter 기능이다 -->
	<!-- 접근할 URL을 pattern 속성에 지정하고 -->
	<!-- 접근할 권한이 있는가를 검사하도록 access 속성에 지정한다 -->
	<!-- 패턴 지정에서 주의할 사항 -->
	<!-- 패턴은 URL의 단계가 깊을수록(길수록) 위쪽에 먼저 작성을 해주어야 한다. -->
	<!-- 만약 user/**, user/a/b/c 순서로 패턴이 있을경우 /user/a/b/c는 무시된다 -->
	<!-- 이때는 /user/a/b/c, /user/** 순서대로 해야 -->

	<!-- security:csrf 의 disable 속성을 true로 설정하면 -->
	<!-- POST 전송시 token을 첨부하지 않아도 사용가능하도록 한다 -->
	<!-- 단 이 방법은 다른 API와 연동할때를 제외하고 -->
	<!-- 사용하지 않는 것이 좋다 -->
	<!-- 기본값은 항상 disable=false로 설정한다. -->
	<security:http auto-config="true" use-expressions="true">

		<security:csrf disabled="false" />

		<security:form-login username-parameter="username"
			password-parameter="password" />

		<security:logout logout-url="/logout"
			logout-success-url="/" invalidate-session="true" />

		<security:intercept-url pattern="/admin/**"
			access="hasRole('ROLE_ADMIN')" />

		<security:intercept-url
			pattern="/member/mypage"
			access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />

		<security:intercept-url
			pattern="/member/password"
			access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />

		<security:intercept-url pattern="/member/**"
			access="permitAll()" />

		<security:intercept-url pattern="/books/**"
			access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />

		<security:intercept-url pattern="/**"
			access="permitAll()" />
	</security:http>

	<!-- 회원가입, 로그인에서 사용자의 비밀번호를 암호화 하기 위하여 -->
	<!-- 암호화 도구를 bean으로 설정 -->
	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg value="4" index="0" />
	</bean>

</beans>
